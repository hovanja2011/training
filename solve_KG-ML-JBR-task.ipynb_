{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"solve_KG-ML-JBR-task.ipynb\"","provenance":[{"file_id":"1LF8ZX_bx8yUmaM5qHAH9tSEl35vy_ea9","timestamp":1617859195832}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.9"}},"cells":[{"cell_type":"markdown","metadata":{"id":"c0Dvq4OKHIxg"},"source":["# Setup"]},{"cell_type":"markdown","metadata":{"id":"peqI9-xDHz22"},"source":["Dataset: https://drive.google.com/file/d/18QXbxh1xmVhGL768B6yF75k6Wsi4ZBNp"]},{"cell_type":"code","metadata":{"id":"HEpt3oL4HIxq"},"source":["import torch\n","from torch import Tensor\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torch.optim import lr_scheduler\n","from torch.utils.data import DataLoader, TensorDataset\n","\n","import numpy as np\n","import pandas as pd\n","\n","import time\n","from pprint import pprint\n","import os\n","import os.path as osp\n","import copy\n","from collections import defaultdict\n","\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","plt.style.use('ggplot')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GvA8pR_17j-u","executionInfo":{"status":"ok","timestamp":1618071852501,"user_tz":-180,"elapsed":60127,"user":{"displayName":"Анна Хованская","photoUrl":"","userId":"17064201623561662847"}},"outputId":"534a9f64-507e-434d-db2c-0818d604b22b"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":221},"id":"ZLPSUnoqHIxr","executionInfo":{"status":"error","timestamp":1618071856269,"user_tz":-180,"elapsed":664,"user":{"displayName":"Анна Хованская","photoUrl":"","userId":"17064201623561662847"}},"outputId":"4adb6149-ecfa-4b6b-a323-7aca2ab4dea7"},"source":["if not torch.cuda.is_available():\n","  raise Exception(\"GPU not availalbe. CPU training can be slow.\")\n","\n","print(\"device name\", torch.cuda.get_device_name(0))"],"execution_count":null,"outputs":[{"output_type":"error","ename":"Exception","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-e60851440f82>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcuda\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_available\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m   \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"GPU not availalbe. CPU training can be slow.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"device name\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcuda\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_device_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mException\u001b[0m: GPU not availalbe. CPU training can be slow."]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2jX3gB7nHIxv","executionInfo":{"status":"ok","timestamp":1618071857790,"user_tz":-180,"elapsed":1197,"user":{"displayName":"Анна Хованская","photoUrl":"","userId":"17064201623561662847"}},"outputId":"2535a3f6-f4b4-455e-ffab-8512960ffca5"},"source":["device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","print(device)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["cpu\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"NNE9rOsRHIxw"},"source":["def load_from_npz(path):\n","    tmp_npz = np.load(path)\n","    return (tmp_npz['X_num_train'], tmp_npz['X_mat_train'], tmp_npz['y_train'],\n","            tmp_npz['X_num_valid'], tmp_npz['X_mat_valid'], tmp_npz['y_valid'],\n","            tmp_npz['X_num_test'], tmp_npz['X_mat_test'], tmp_npz['y_test']\n","           )"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6YAImjorHIxx"},"source":["def print_cm(cm_in, label_names, *, fig_size=(6,6), norm=False, norm_full_scale=False):\n","  cm = copy.copy(cm_in)\n","\n","  if norm:\n","    total, total_acc = 0, 0\n","    cm = cm.astype(np.float)\n","    for ir, r in enumerate(cm):\n","      s = r.sum()\n","      total += s\n","      for ic, c in enumerate(r):\n","        if s != 0:\n","          cm[ir, ic] = c/s\n","        if ic == ir:\n","          total_acc += c\n","  else:\n","   cm = cm.astype(np.int)\n","\n","  df_cm = pd.DataFrame(cm, index = label_names, columns = label_names)\n","  df_cm = df_cm.rename_axis(\"True label\")\n","  df_cm = df_cm.rename_axis(\"Predicted label\", axis=\"columns\")\n","  plt.figure(figsize=fig_size)\n","  plt.tick_params(axis='both', which='major', labelsize=10,\n","                  labelbottom = False, bottom=False,\n","                  top = False, labeltop=True)\n","  if norm_full_scale:\n","    ax = sns.heatmap(df_cm, annot=True, vmin=0, vmax=1)\n","  else:\n","    ax = sns.heatmap(df_cm, annot=True)\n","  ax.xaxis.set_label_position('top')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TGPuN1Z6HIxx"},"source":["def print_metrics(metrics, epoch_samples, phase):\n","    outputs = []\n","    for k in metrics.keys():\n","        outputs.append(f\"{k}: {metrics[k] / epoch_samples :.2e}\")\n","\n","    print(f'{phase}: {\", \".join(outputs)}')\n","\n","def train_model(model, optimizer, loss_fn, num_epochs=25):\n","    best_model_wts = copy.deepcopy(model.state_dict())\n","    best_train_loss = 1e10\n","    best_val_loss = 1e10\n","\n","    best_epoch = -1\n","    full_metrics = dict(train_loss=[],\n","                       val_loss=[],\n","                       LR=[],\n","                       time_elapsed=[]\n","                       )\n","    \n","    for epoch in range(num_epochs):\n","        print('-' * 10)\n","        print(f'Epoch {epoch+1}/{num_epochs}')\n","\n","        since = time.time()\n","\n","        # Each epoch has a training and validation phase\n","        for phase in ['train', 'val']:\n","            if phase == 'train':\n","                for param_group in optimizer.param_groups:\n","                    LR = param_group[\"lr\"]\n","                    full_metrics['LR'].append(LR)\n","                    print(f'LR {LR:.2e}')\n","\n","                model.train()  # Set model to training mode\n","            else:\n","                model.eval()   # Set model to evaluate mode\n","\n","            metrics = defaultdict(float)\n","            epoch_samples = 0\n","\n","            for inputs_1, inputs_2, labels in dataloaders[phase]:\n","                inputs_1 = inputs_1.to(device)\n","                inputs_2 = inputs_2.to(device)\n","                labels = labels.to(device)\n","\n","                # zero the parameter gradients\n","                optimizer.zero_grad()\n","\n","                # forward\n","                # track history if only in train\n","                with torch.set_grad_enabled(phase == 'train'):\n","                    outputs = model(inputs_1, inputs_2)\n","                    loss = loss_fn(outputs,torch.argmax(labels, dim=1))\n","                    metrics['loss'] = loss\n","                    # backward + optimize only if in training phase\n","                    if phase == 'train':\n","                        loss.backward()\n","                        optimizer.step()\n","\n","                # statistics\n","                epoch_samples += inputs_1.size(0)\n","            \n","            if phase == 'train':\n","                train_loss = metrics['loss'] / epoch_samples\n","                full_metrics['train_loss'].append(train_loss.cpu().item())\n","\n","            else:\n","                val_loss = metrics['loss'] / epoch_samples\n","                full_metrics['val_loss'].append(val_loss.cpu().item())\n","            \n","            print_metrics(metrics, epoch_samples, phase)\n","\n","            # deep copy the model\n","            if phase == 'val':\n","                if 0 < val_loss < best_val_loss:\n","                    print(\"saving best model\")\n","                    best_train_loss = train_loss\n","                    best_val_loss = val_loss\n","                    best_epoch = epoch\n","                    best_model_wts = copy.deepcopy(model.state_dict())\n","\n","\n","        time_elapsed = time.time() - since\n","        full_metrics['time_elapsed'].append(time_elapsed)\n","\n","        print('{:.0f}m {:.0f}s'.format(time_elapsed // 60, time_elapsed % 60))\n","        \n","    best_loss_dict = dict(best_train_loss=best_train_loss.cpu().item(), best_val_loss=best_val_loss.cpu().item())\n","    print(f'Best epoch: {best_epoch}, best_train_loss: {best_train_loss:.2e}, best_val_loss: {best_val_loss:.2e}')\n","\n","    # load best model weights\n","    model.load_state_dict(best_model_wts)\n","    return model, best_loss_dict, best_epoch, full_metrics"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YkIJ6eIiHIxz"},"source":["#for encoding\n","label_names = ['pr','gm']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"8Fbk9Bn_HIx0"},"source":["## Create dataloaders"]},{"cell_type":"code","metadata":{"id":"k6Sysv1jHIx0"},"source":["# Load from .npz file\n","X_num_train, X_mat_train, y_train, X_num_valid, X_mat_valid, y_valid, X_num_test, X_mat_test, y_test = load_from_npz('drive/MyDrive/Colab Notebooks/dataset_(gm,pr)_all_ds.npz')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uqXNnjCzHIx1"},"source":["dataset_train = TensorDataset(torch.as_tensor(X_num_train),  # X_num\n","                              Tensor(X_mat_train).transpose(1,3),  # X_mat, transpose for (s, c, w, h) format\n","                              nn.functional.one_hot(torch.as_tensor(y_train)).to(dtype=torch.float32))  # one-hot y\n","dataset_valid = TensorDataset(torch.as_tensor(X_num_valid),\n","                              Tensor(X_mat_valid).transpose(1,3),\n","                              nn.functional.one_hot(torch.as_tensor(y_valid)).to(dtype=torch.float32))\n","dataset_test = TensorDataset(torch.as_tensor(X_num_test),\n","                             Tensor(X_mat_test).transpose(1,3),\n","                             nn.functional.one_hot(torch.as_tensor(y_test)).to(dtype=torch.float32))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"CWYxc9w4HIx4"},"source":["batch_size = 64\n","num_workers = 2"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pnTC45xwHIx4"},"source":["dataloaders = {\n","    'train': DataLoader(dataset_train, batch_size=batch_size, shuffle=True, num_workers=num_workers),\n","    'val': DataLoader(dataset_valid, batch_size=batch_size, shuffle=True, num_workers=num_workers),\n","    'test': DataLoader(dataset_test, batch_size=batch_size, shuffle=True, num_workers=num_workers)\n","    }"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5Lo19yAIHIx5"},"source":["# Model train"]},{"cell_type":"markdown","metadata":{"id":"8HHblgnVHIx6"},"source":["## Model architecture"]},{"cell_type":"code","metadata":{"id":"9e1LjOJwHIx6"},"source":["def convrelu(in_channels, out_channels, kernel):\n","    return nn.Sequential(\n","        nn.Conv2d(in_channels, out_channels, kernel),\n","        nn.ReLU(inplace=True),\n","    )\n","    \n","class MyModel(nn.Module):\n","    def __init__(self, n_num, n_class):\n","        super(MyModel,self).__init__()\n","        self.layer1=convrelu(2, 16, 5)\n","        self.layer2=convrelu(16, 32, 5)\n","        self.layer3=convrelu(32, 64, 3)        \n","        self.pooling=nn.MaxPool2d(kernel_size=2, stride=2)\n","\n","        self.fc1=nn.Linear(576,64)\n","        self.sigm=nn.Sigmoid()\n","        self.fc2=nn.Linear(64,16)\n","        self.fc3=nn.Linear(16,4)\n","        self.drop_out=nn.Dropout()\n","        self.fc4=nn.Linear(6,2)\n","        \n","        \n","    def forward(self, x_num, x_mat):\n","        x=self.layer1(x_mat)\n","        x=self.layer2(x)\n","        x=self.layer3(x)\n","        x=self.pooling(x)\n","\n","        x = x.view(x.size(0), -1)   # Flatten them for FC\n","        x=self.fc1(x)\n","        x=self.sigm(x)\n","        x=self.fc2(x)\n","        x=self.sigm(x)\n","        x=self.fc3(x)\n","        x=self.sigm(x)\n","        x=torch.cat((x_num,x),dim=1)\n","        x=self.fc4(x)\n","\n","        return x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MOwwCvldHIx8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618072131545,"user_tz":-180,"elapsed":966,"user":{"displayName":"Анна Хованская","photoUrl":"","userId":"17064201623561662847"}},"outputId":"0880707a-6e9f-49c6-a9a9-12c3c68968f1"},"source":["n_num = 2\n","n_class = 2\n","model = MyModel(n_num=n_num, n_class=n_class)\n","# print model architecture\n","print(model)\n","\n","# Checking that the model is working\n","model = model.to(device)\n","test_sample = next(iter(dataloaders['train']))\n","test_ans = model(test_sample[0].to(device), test_sample[1].to(device))\n","\n","print(f'x_num shape = {test_sample[0].shape}')\n","print(f'x_mat shape = {test_sample[1].shape}')\n","print(f'y shape = {test_sample[2].shape}')\n","print()\n","\n","print(f'tmp_ans.shape: {test_ans.cpu().detach().numpy().shape}')\n","# print(test_ans[:10])\n","\n","# Example output:\n","\n","# x_num shape = torch.Size([64, 2])\n","# x_mat shape = torch.Size([64, 2, 16, 16])\n","# y shape = torch.Size([64, 2])\n","# \n","# tmp_ans.shape: (64, 2)\n","# tensor([[2.8366e-02, 6.5230e-01],\n","#         [1.4964e-01, 6.1194e-01],\n","#         [1.1073e-01, 1.0914e-01],\n","#         [0.0000e+00, 5.2040e-01],\n","#         [0.0000e+00, 6.3859e-01],\n","#         [9.6151e-02, 1.6157e-01],\n","#         [3.9028e-02, 2.4012e-01],\n","#         [8.7142e-02, 3.1668e-01],\n","#         [1.3980e+02, 4.4432e+01],\n","#         [8.8899e-02, 4.7693e-01]], device='cuda:0', grad_fn=<SliceBackward>)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["MyModel(\n","  (layer1): Sequential(\n","    (0): Conv2d(2, 16, kernel_size=(5, 5), stride=(1, 1))\n","    (1): ReLU(inplace=True)\n","  )\n","  (layer2): Sequential(\n","    (0): Conv2d(16, 32, kernel_size=(5, 5), stride=(1, 1))\n","    (1): ReLU(inplace=True)\n","  )\n","  (layer3): Sequential(\n","    (0): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))\n","    (1): ReLU(inplace=True)\n","  )\n","  (pooling): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)\n","  (fc1): Linear(in_features=576, out_features=64, bias=True)\n","  (sigm): Sigmoid()\n","  (fc2): Linear(in_features=64, out_features=16, bias=True)\n","  (fc3): Linear(in_features=16, out_features=4, bias=True)\n","  (drop_out): Dropout(p=0.5, inplace=False)\n","  (fc4): Linear(in_features=6, out_features=2, bias=True)\n",")\n","x_num shape = torch.Size([64, 2])\n","x_mat shape = torch.Size([64, 2, 16, 16])\n","y shape = torch.Size([64, 2])\n","\n","tmp_ans.shape: (64, 2)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"0TDlDzLNHIx9"},"source":["## Train cycle"]},{"cell_type":"code","metadata":{"id":"-hkQRiR7HIx9"},"source":["optimizer_fn = optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=1e-4)\n","# optimizer_fn = optim.SGD(model.parameters(), lr=1e-3, momentum=0.9)\n","loss_fn = nn.CrossEntropyLoss()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3JbJAmiSHIx9","scrolled":true,"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618075674417,"user_tz":-180,"elapsed":3057156,"user":{"displayName":"Анна Хованская","photoUrl":"","userId":"17064201623561662847"}},"outputId":"d5e6700d-7d05-4a5d-c2b8-508cbeea79a8"},"source":["%%time\n","num_epochs = 20\n","model, best_loss_dict, best_epoch, metrics = train_model(model.to(device), optimizer_fn, loss_fn, num_epochs=num_epochs)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["----------\n","Epoch 1/20\n","LR 1.00e-04\n","train: loss: 1.19e-06\n","val: loss: 8.86e-06\n","saving best model\n","5m 8s\n","----------\n","Epoch 2/20\n","LR 1.00e-04\n","train: loss: 8.65e-07\n","val: loss: 7.60e-06\n","saving best model\n","6m 25s\n","----------\n","Epoch 3/20\n","LR 1.00e-04\n","train: loss: 6.24e-07\n","val: loss: 2.00e-06\n","saving best model\n","2m 42s\n","----------\n","Epoch 4/20\n","LR 1.00e-04\n","train: loss: 3.96e-07\n","val: loss: 1.78e-06\n","saving best model\n","2m 38s\n","----------\n","Epoch 5/20\n","LR 1.00e-04\n","train: loss: 4.15e-07\n","val: loss: 2.57e-06\n","2m 38s\n","----------\n","Epoch 6/20\n","LR 1.00e-04\n","train: loss: 3.13e-07\n","val: loss: 6.39e-07\n","saving best model\n","2m 39s\n","----------\n","Epoch 7/20\n","LR 1.00e-04\n","train: loss: 2.85e-07\n","val: loss: 1.12e-06\n","2m 38s\n","----------\n","Epoch 8/20\n","LR 1.00e-04\n","train: loss: 5.03e-07\n","val: loss: 2.24e-06\n","2m 39s\n","----------\n","Epoch 9/20\n","LR 1.00e-04\n","train: loss: 9.80e-07\n","val: loss: 4.05e-06\n","2m 38s\n","----------\n","Epoch 10/20\n","LR 1.00e-04\n","train: loss: 3.21e-07\n","val: loss: 5.56e-06\n","2m 37s\n","----------\n","Epoch 11/20\n","LR 1.00e-04\n","train: loss: 2.34e-07\n","val: loss: 2.09e-06\n","2m 37s\n","----------\n","Epoch 12/20\n","LR 1.00e-04\n","train: loss: 2.37e-07\n","val: loss: 1.42e-06\n","2m 38s\n","----------\n","Epoch 13/20\n","LR 1.00e-04\n","train: loss: 6.93e-07\n","val: loss: 3.86e-06\n","2m 37s\n","----------\n","Epoch 14/20\n","LR 1.00e-04\n","train: loss: 4.51e-07\n","val: loss: 1.68e-06\n","2m 36s\n","----------\n","Epoch 15/20\n","LR 1.00e-04\n","train: loss: 2.79e-07\n","val: loss: 2.92e-06\n","2m 37s\n","----------\n","Epoch 16/20\n","LR 1.00e-04\n","train: loss: 3.85e-07\n","val: loss: 3.82e-07\n","saving best model\n","2m 37s\n","----------\n","Epoch 17/20\n","LR 1.00e-04\n","train: loss: 3.84e-07\n","val: loss: 5.03e-06\n","2m 36s\n","----------\n","Epoch 18/20\n","LR 1.00e-04\n","train: loss: 5.03e-07\n","val: loss: 6.01e-06\n","2m 36s\n","----------\n","Epoch 19/20\n","LR 1.00e-04\n","train: loss: 4.63e-07\n","val: loss: 7.81e-07\n","2m 38s\n","----------\n","Epoch 20/20\n","LR 1.00e-04\n","train: loss: 4.60e-07\n","val: loss: 5.28e-06\n","2m 38s\n","Best epoch: 15, best_train_loss: 3.85e-07, best_val_loss: 3.82e-07\n","CPU times: user 55min 6s, sys: 1min 58s, total: 57min 4s\n","Wall time: 58min 51s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"SX3eZwnuHIx-","colab":{"base_uri":"https://localhost:8080/","height":647},"executionInfo":{"status":"ok","timestamp":1618079614242,"user_tz":-180,"elapsed":1528,"user":{"displayName":"Анна Хованская","photoUrl":"","userId":"17064201623561662847"}},"outputId":"e54ff9c9-36f6-4f94-8850-66dddc3b320a"},"source":["metrics_df = pd.DataFrame(metrics)\n","metrics_df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>train_loss</th>\n","      <th>val_loss</th>\n","      <th>LR</th>\n","      <th>time_elapsed</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.191462e-06</td>\n","      <td>8.860910e-06</td>\n","      <td>0.0001</td>\n","      <td>307.706390</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>8.652702e-07</td>\n","      <td>7.598677e-06</td>\n","      <td>0.0001</td>\n","      <td>384.598404</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>6.237738e-07</td>\n","      <td>2.000826e-06</td>\n","      <td>0.0001</td>\n","      <td>161.608230</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3.964043e-07</td>\n","      <td>1.783124e-06</td>\n","      <td>0.0001</td>\n","      <td>157.752112</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4.153380e-07</td>\n","      <td>2.573886e-06</td>\n","      <td>0.0001</td>\n","      <td>158.476893</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>3.133180e-07</td>\n","      <td>6.391990e-07</td>\n","      <td>0.0001</td>\n","      <td>158.949566</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>2.848506e-07</td>\n","      <td>1.118414e-06</td>\n","      <td>0.0001</td>\n","      <td>158.209682</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>5.030707e-07</td>\n","      <td>2.235934e-06</td>\n","      <td>0.0001</td>\n","      <td>159.271031</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>9.802060e-07</td>\n","      <td>4.045437e-06</td>\n","      <td>0.0001</td>\n","      <td>158.329450</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>3.214739e-07</td>\n","      <td>5.560571e-06</td>\n","      <td>0.0001</td>\n","      <td>156.763324</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>2.343127e-07</td>\n","      <td>2.087589e-06</td>\n","      <td>0.0001</td>\n","      <td>157.203674</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>2.373537e-07</td>\n","      <td>1.422152e-06</td>\n","      <td>0.0001</td>\n","      <td>157.742396</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>6.932134e-07</td>\n","      <td>3.855634e-06</td>\n","      <td>0.0001</td>\n","      <td>156.865453</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>4.507309e-07</td>\n","      <td>1.681283e-06</td>\n","      <td>0.0001</td>\n","      <td>155.581388</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>2.787001e-07</td>\n","      <td>2.919184e-06</td>\n","      <td>0.0001</td>\n","      <td>157.177738</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>3.848645e-07</td>\n","      <td>3.815713e-07</td>\n","      <td>0.0001</td>\n","      <td>156.752246</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>3.840890e-07</td>\n","      <td>5.027965e-06</td>\n","      <td>0.0001</td>\n","      <td>155.914372</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>5.026502e-07</td>\n","      <td>6.006933e-06</td>\n","      <td>0.0001</td>\n","      <td>156.410049</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>4.630877e-07</td>\n","      <td>7.806757e-07</td>\n","      <td>0.0001</td>\n","      <td>158.112156</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>4.598867e-07</td>\n","      <td>5.277036e-06</td>\n","      <td>0.0001</td>\n","      <td>158.429991</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      train_loss      val_loss      LR  time_elapsed\n","0   1.191462e-06  8.860910e-06  0.0001    307.706390\n","1   8.652702e-07  7.598677e-06  0.0001    384.598404\n","2   6.237738e-07  2.000826e-06  0.0001    161.608230\n","3   3.964043e-07  1.783124e-06  0.0001    157.752112\n","4   4.153380e-07  2.573886e-06  0.0001    158.476893\n","5   3.133180e-07  6.391990e-07  0.0001    158.949566\n","6   2.848506e-07  1.118414e-06  0.0001    158.209682\n","7   5.030707e-07  2.235934e-06  0.0001    159.271031\n","8   9.802060e-07  4.045437e-06  0.0001    158.329450\n","9   3.214739e-07  5.560571e-06  0.0001    156.763324\n","10  2.343127e-07  2.087589e-06  0.0001    157.203674\n","11  2.373537e-07  1.422152e-06  0.0001    157.742396\n","12  6.932134e-07  3.855634e-06  0.0001    156.865453\n","13  4.507309e-07  1.681283e-06  0.0001    155.581388\n","14  2.787001e-07  2.919184e-06  0.0001    157.177738\n","15  3.848645e-07  3.815713e-07  0.0001    156.752246\n","16  3.840890e-07  5.027965e-06  0.0001    155.914372\n","17  5.026502e-07  6.006933e-06  0.0001    156.410049\n","18  4.630877e-07  7.806757e-07  0.0001    158.112156\n","19  4.598867e-07  5.277036e-06  0.0001    158.429991"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"qSwwJG8VHIx-","colab":{"base_uri":"https://localhost:8080/","height":293},"executionInfo":{"status":"ok","timestamp":1618079615615,"user_tz":-180,"elapsed":1638,"user":{"displayName":"Анна Хованская","photoUrl":"","userId":"17064201623561662847"}},"outputId":"214f33a2-8620-40e1-e12b-49b761f2bf1d"},"source":["metrics_df[['train_loss', 'val_loss']].plot()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f36eaf79e90>"]},"metadata":{"tags":[]},"execution_count":24},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"nSlexqy4HIx_","colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"status":"ok","timestamp":1618079618278,"user_tz":-180,"elapsed":1478,"user":{"displayName":"Анна Хованская","photoUrl":"","userId":"17064201623561662847"}},"outputId":"ae9070b3-f240-4d27-fb26-a68bacb1f893"},"source":["metrics_df['time_elapsed'].plot()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f36ea2c1910>"]},"metadata":{"tags":[]},"execution_count":25},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"LQr7BvwBHIyA"},"source":["# Model test"]},{"cell_type":"code","metadata":{"id":"36Iq9DnhHIyA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618079642279,"user_tz":-180,"elapsed":19306,"user":{"displayName":"Анна Хованская","photoUrl":"","userId":"17064201623561662847"}},"outputId":"23564fe1-2936-4c92-93d0-a88e587d89b0"},"source":["%%time \n","idx_max = len(dataloaders['test'])\n","cm = np.zeros((n_class, n_class), dtype=np.int)\n","for idx, (inputs_1, inputs_2, labels) in enumerate(iter(dataloaders[\"test\"])): \n","  inputs_1 = inputs_1.to(device)\n","  inputs_2 = inputs_2.to(device)\n","    \n","  # Predict\n","  pred = model(inputs_1, inputs_2)\n","  # The loss functions include the sigmoid function.\n","  pred_np = torch.argmax(pred, dim=1).cpu().numpy()\n","  labels_np = torch.argmax(labels, dim=1).cpu().numpy()\n","  for p, l in zip(pred_np, labels_np):\n","    cm[l][p] += 1\n","  \n","#   print(f\"{idx+1}/{idx_max}: {score}/{total}\")\n","# print(score/total)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 15.3 s, sys: 1.18 s, total: 16.4 s\n","Wall time: 18 s\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":394},"id":"j1fpCOyZwM4I","executionInfo":{"status":"ok","timestamp":1618079642288,"user_tz":-180,"elapsed":17194,"user":{"displayName":"Анна Хованская","photoUrl":"","userId":"17064201623561662847"}},"outputId":"85dddcbd-3f2d-44d0-eeb8-5cf2308c6666"},"source":["print_cm(cm, label_names=label_names, norm=True, norm_full_scale=True)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x432 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"qtXgv4YgHIyA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618067082510,"user_tz":-180,"elapsed":780514,"user":{"displayName":"Анна Хованская","photoUrl":"","userId":"17064201623561662847"}},"outputId":"b051f8e8-aa61-498f-c420-4b266df934ec"},"source":["print_cm(cm, label_names=label_names)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x432 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"DKkp-N1CHIyC"},"source":["# Save model"]},{"cell_type":"code","metadata":{"id":"6teJHA_ZHIyC"},"source":["model_dict = {\n","    'model_state_dict': model.state_dict(),\n","    'optimizer_fn_state_dict': optimizer_fn.state_dict(),\n","    'best_loss_dict': best_loss_dict\n","    }\n","\n","timestamp = time.strftime('%Y%m%d-%H%M%S')\n","RS = eval(timestamp)\n","\n","models_out_dir = osp.join('models')\n","os.makedirs(models_out_dir, exist_ok=True)\n","torch.save(model_dict, osp.join(models_out_dir, f\"model_dict_{timestamp}.pth\"))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RlsjhzsZHIyC"},"source":["# Load model"]},{"cell_type":"code","metadata":{"id":"fbHI0MZHHIyD","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1618067082878,"user_tz":-180,"elapsed":780219,"user":{"displayName":"Анна Хованская","photoUrl":"","userId":"17064201623561662847"}},"outputId":"2ebbaf86-d75f-490b-a5cc-c7be6f91d229"},"source":["model_dict = torch.load(osp.join(models_out_dir, f\"model_dict_{timestamp}.pth\"))\n","model.load_state_dict(model_dict['model_state_dict'])\n","optimizer_fn.load_state_dict(model_dict['optimizer_fn_state_dict'])\n","best_loss_dict = model_dict['best_loss_dict']\n","pprint(best_loss_dict)\n","\n","model = model.to(device)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["{'best_train_loss': 7.422555086122884e-07,\n"," 'best_val_loss': 1.1071597327827476e-06}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"utkhmLSbHIyE"},"source":["\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7DGzNBz3lM9l"},"source":[""],"execution_count":null,"outputs":[]}]}